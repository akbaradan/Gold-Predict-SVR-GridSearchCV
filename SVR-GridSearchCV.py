# -*- coding: utf-8 -*-
"""Ini TA Bismillah

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rjet4IYcX6do43VkLmI-b4triLVhAZpJ
"""

# import time

# # Mencatat waktu mulai
# start_time = time.time()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVR
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error

# Membaca data historis emas
data = pd.read_csv('Data Historis GLD (1).csv', parse_dates=['Tanggal'], dayfirst=True)

# Mengganti tanda koma dengan titik dalam kolom yang berisi nilai numerik
numeric_cols = ['Pembukaan', 'Tertinggi', 'Terendah', 'Terakhir']
for col in numeric_cols:
    data[col] = data[col].str.replace(',', '.').astype(float)

# Mengganti tanda koma dengan titik dalam kolom Vol.
data['Vol.'] = data['Vol.'].str.replace(',', '').str.replace('M', '').astype(float) * 1e6

# Mengonversi kolom Change% menjadi desimal
data['Perubahan%'] = data['Perubahan%'].str.replace(',', '.').str.replace('%', '').astype(float) / 100

# Persiapan data
data['Tanggal'] = pd.to_datetime(data['Tanggal'])
# data['Days'] = (data['Tanggal'] - data['Tanggal'].min()).dt.days
data.set_index('Tanggal', inplace=True)
df_unsampled = data.resample('D').asfreq().interpolate(method='linear')
df_unsampled.reset_index(inplace=True)
data = data.sort_values('Tanggal')
df_unsampled = df_unsampled.sort_values('Tanggal')

print(df_unsampled)

df_unsampled['Terakhir'] = df_unsampled['Terakhir'].shift(-1)
df_unsampled = df_unsampled.dropna()
print(df_unsampled)

# df_unsampled.to_csv('data_sorted.csv', index=True)

import seaborn as sns
import matplotlib.pyplot as plt

# Pilih subset kolom yang relevan
selected_columns = ['Pembukaan', 'Tertinggi', 'Terendah', 'Terakhir', 'Vol.', 'Perubahan%']
data_subset = df_unsampled[selected_columns]

# Hitung korelasi hanya terhadap kolom 'Terakhir'
corr_with_close = data_subset.corr(method='pearson')[['Terakhir']].drop('Terakhir')

# Buat heatmap untuk korelasi dengan 'Terakhir'
plt.figure(figsize=(5, 7))
sns.heatmap(corr_with_close, annot=True, annot_kws={"size": 10}, cmap='coolwarm', cbar=True, fmt='.4f')

plt.title('Heatmap Korelasi dengan Terakhir (Close)')
plt.xlabel('Terakhir (Close)')
plt.ylabel('Variabel')
plt.show()

# Pilih fitur-fitur yang akan digunakan untuk memprediksi harga emas berdasarkan correlation
temp_x = df_unsampled.copy()
temp_y = df_unsampled.copy()
X = temp_x[['Pembukaan', 'Tertinggi', 'Terendah']]
y = temp_y['Terakhir']

print(X)
print(y)

y_new = y.copy()
X_new = X.copy()

X_train = X_new.copy()
y_train = y_new.copy()

X_test = X_new.copy()
y_test = y_new.copy()

# Bagi data menjadi data pelatihan dan data pengujian
X_train = X_train.drop(X_train[2993:].index)
y_train = y_train.drop(y_train[2993:].index)
y_train.shape
X_train.shape

X_test = X_test.drop(X_test[:-749].index)
y_test = y_test.drop(y_test[:-749].index)
y_test.shape
X_test.shape

X_train2 = X_train.copy()
y_train2 = y_train.copy()

X_test2 = X_test.copy()
y_test2 = y_test.copy()

y_train2 = y_train2.values.ravel()
y_test2 = y_test2.values.ravel()

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train2)
X_test_scaled = scaler.transform(X_test2)

n_val = int(0.2 * len(X_train_scaled))  # 20% dari jumlah data pelatihan

# Mengambil 20% data terakhir untuk validasi
X_val_split = X_train_scaled[-n_val:]
y_val_split = y_train2[-n_val:]

# Mengambil sisa data untuk pelatihan
X_train_split = X_train_scaled[:-n_val]
y_train_split = y_train2[:-n_val]

# Latih model Support Vector Regression (SVR) dengan GridSearchCV
search_space = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001], 'epsilon': [0.1, 0.01, 0.001]}
grid_search = GridSearchCV(SVR(kernel='rbf'),
                           param_grid = search_space,
                           scoring = ["r2", "neg_root_mean_squared_error"],
                           refit = "r2",
                           cv=5,
                           verbose = 4)
grid_search.fit(X_train_split, y_train_split)
print(grid_search.best_params_)
print(grid_search.best_score_)
val_predictions = grid_search.predict(X_val_split)

mse_val = mean_squared_error(y_val_split, val_predictions)
r2_val = r2_score(y_val_split, val_predictions)
mape_val = mean_absolute_percentage_error(y_val_split, val_predictions)

print(f'MSE pada data validasi: {mse_val}')
print(f'R-squared pada data validasi: {r2_val}')
print(f'MAPE pada data validasi: {mape_val}')

# Prediksi harga emas pada data pengujian
y_pred = grid_search.predict(X_test_scaled)

print(X_train2)
print(X_test2)

# Ekstrak hasil pencarian parameter lengkap
results = pd.DataFrame(grid_search.cv_results_)

# Pilih kolom yang relevan dan urutkan berdasarkan skor r2
results = results[['params', 'mean_test_r2', 'rank_test_r2', 'mean_test_neg_root_mean_squared_error']]
results = results.sort_values(by='mean_test_r2', ascending=False)

# Simpan hasil lengkap ke file CSV
results.to_csv('grid_search_results.csv', index=False)

# print("Hasil pencarian parameter lengkap telah disimpan ke grid_search_results.csv")

# (R-squared)
r_squared = r2_score(y_test2, y_pred)
print("(R-squared):", r_squared)
# MSE
mse = mean_squared_error(y_test2,y_pred)
print("mse",mse)
# Mape
mape = mean_absolute_percentage_error(y_test2, grid_search.predict(X_test_scaled))
print("MAPE",mape)

y_pred = pd.DataFrame(y_pred, columns=['Prediksi Harga'])
print(y_pred)

y_pred = pd.DataFrame(y_pred, columns=['Prediksi Harga'])

df_pred = df_unsampled.drop(['Terakhir','Pembukaan', 'Tertinggi', 'Terendah', 'Vol.', 'Perubahan%'], axis=1)
df_pred = df_pred.iloc[1:]
df_pred = df_pred.reset_index(drop=True)
df_pred = df_pred.drop(df_pred[:-749].index)

df_pred = df_pred['Tanggal'].reset_index()

preds = pd.concat([df_pred,y_pred], axis=1)
preds = preds.drop(['index'], axis=1)

print(preds)

plt.figure(figsize=(14, 7))
plt.plot(pd.to_datetime(df_unsampled['Tanggal']), df_unsampled['Terakhir'], label='Nilai Aktual')
plt.plot(pd.to_datetime(preds['Tanggal']),preds['Prediksi Harga'], label='Hasil Prediksi', linestyle='-') # Use 'Prediksi Harga' instead of 'y_pred'
plt.xlabel('Tanggal')
plt.ylabel('Harga Terakhir')
plt.title('Perbandingan Nilai Aktual dan Hasil Prediksi Harga Emas')
plt.legend()
plt.grid(True)
plt.show()

import seaborn as sns
residuals = y_test2 - y_pred.values.ravel()
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True, bins=30)
plt.title('Distribusi Kesalahan (Residual Plot)')
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()